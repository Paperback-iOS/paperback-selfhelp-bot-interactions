# override permissions for any command
permissions:
  whitelist: "${ ROLES.COMMUNITY_MANAGER }"
#   # Its possible to set permissions for internal commands too.
#   role:
#     whitelist:
#       - "${ ROLES.COMMUNITY_MODERATOR }"
#
#   # Its possible to set permissions for custom commands
#   echo:
#     whitelist:
#       - "${ ROLES.COMMUNITY_MODERATOR }"
#
#   # Its possible to set permissions for custom commands in folders
#   characters/amber:
#     whitelist:
#       - "${ ROLES.COMMUNITY_MODERATOR }"

# Only delete stuff after this line if you know what you're doing.
modules:
  moderation:
    enabled: true
    loggingChannel: ${ CHANNELS.WARN_LOGS }
    
    wordCensorConfig:
      matches:
        - regex: gook\b
          flags: i
          warn: true
        - regex: niglet\b
          flags: i
          warn: true
        - regex: tranny\b
          flags: i
          warn: true
        - regex: cunt\b
          flags: i
        - regex: retard(ed)?\b
          flags: i
          warn: true
        - regex: nigur\b
          flags: i
          warn: true
        - regex: \bcum\b
          flags: i
        - regex: chink\b
          flags: i
          warn: true
        - regex: autist\b
          flags: i
        - regex: ni(gg|bb)(er|a)?\b
          flags: i
          warn: true
        - regex: fagg(ot)?\b
          flags: i
          warn: true
    
    warnConfig:
      permissions:
          whitelist:
            - "${ ROLES.COMMUNITY_MANAGER }"
            - "${ ROLES.COMMUNITY_MODERATOR }"
            - "${ ROLES.COMMUNITY_HELPER }"
            
      cooldownPeriod: 1 month
      
      levels:
        # Free warning
        - action: NOTICE
        
        - action: MUTE
          duration: 5 mins
          
        - action: MUTE
          duration: 15 mins
          
        - action: MUTE
          duration: 30 mins
          
        - action: MUTE
          duration: 1 hour
        
        - action: MUTE
          duration: 1 day
          
        - action: BAN
            
    muteConfig:
      permissions:
        whitelist:
          - "${ ROLES.COMMUNITY_HELPER }"
      muteRole: ${ROLES.MUTED}

  userNotes:
    enabled: false
    permissions:
      whitelist: "${ ROLES.COMMUNITY_MANAGER }"

  pointsSystem:
    enabled: false
    permissions:
      whitelist: "${ ROLES.COMMUNITY_MANAGER }"
        
    loggingChannel: 

  vanityRoles:
    enabled: false

    # Who can use the /vanityrole command, anyone with MANAGE_ROLES if not set.
    permissions:
      whitelist:
        - "${ ROLES.SUPPORTER_AAA }"
        - "${ ROLES.BOOSTER }"

    # Log whenever someone's custom role is updated
    loggingChannel: "${ CHANNELS.CUSTOM_ROLES }"

    createRoleAfter: "741007547254964325"

  reactRoles:
    enabled: true

    # Who can use the /reactroles command, anyone with MANAGE_ROLES if not set.
    permissions:
      whitelist: 
       - "${ ROLES.COMMUNITY_MANAGER }"
  
    configs:
      FEEDBACK:
        title: "Feedback Role"
        description: |- 
          React with ðŸ“£ to get notifications when feedback is required for any new features of the app.
          ***Note**: Reactions will be removed if the bot successfully gives you the role.*
          
        reactions:
          "ðŸ“£":
            role: "676012997264539649"
            description: "Get pinged for feedback"
        
        
      DEVICEOS:
        title: "What is your primary device of use for Paperback?"
        color: 0x2f3136
        description: |-
          React with the matching emoji for specific roles
          ***Note**: Reactions will be removed if the bot successfully gives you the role.*

        reactions:
          # REACTION EMOJI ID: ROLE
          "iOS:965748659964772382":
            role: "${ ROLES.IOS }"
            description: "<@&${ ROLES.IOS }>"

          "iPadOS:965748660078018590":
            role: "${ ROLES.IPADOS }"
            description: "<@&${ ROLES.IPADOS }>"

          "MacOS:965748659847303219":
            role: "${ ROLES.MACOS }"
            description: "<@&${ ROLES.MACOS }>"

  modMail:
    enabled: true
    
    # This restricts who can open a thread. If this is not set, anyone can open a thread by DMing the bot
    permission: "${ ROLES.COMMUNITY_CLEARANCE }"
    
    ignoreRole: "${ ROLES.MODMAIL_IGNORED }"
    
    channels:
      logging: "${ CHANNELS.MODMAIL.LOGGING }"
      threads: "${ CHANNELS.MODMAIL.THREADS }"

  # Role kits
  roleKits:
    enabled: true

    # This restricts who can use the /rolekits command. if its not set, anyone with the MANAGE_ROLES permission can use the command.
    permission: "${ ROLES.COMMUNITY_MANAGER }"
   
    # The kits that are available
    kits:
      Template:
        name: 
        permissions:
          blacklist:
            - "" 
        addRoles:
          - "" 
        removeRoles:
          - "${ ROLES.COMMUNITY_MODERATOR }"
          
  # Verification Module
  verification:
    enabled: true
    
    # This restricts who can use the /verification command. if its not set, anyone can use the command.
    permission: "${ ROLES.COMMUNITY_MANAGER }"
    
    # This sets the channel to use for sending the initialMessage into. If this is not set then the bot will not automatically send the welcome message.
    welcomeChannel: "${  CHANNELS.WELCOME  }"
  
    # The role to add to users when they successfully accept the rules.
    verifiedRole: "${  ROLES.COMMUNITY_CLEARANCE  }"
    
    interactions:
      # You can use this to set a different greeting message. If this is not set then initialMessage is used.
      greetingsMessageInteractionPath: "verification"
      
      # The initial message displayed when the /verification is run.
      initialMessageInteractionPath: "verification"
      
      # The interaction to display when the user presses the verification button.
      rulesAcknowledgementInteractionPath: "serverRulesAcknowledgement"
    
    # Verification button settings
    button:
      title: "I agree*"
      type: "PRIMARY"
      
      
  supportThreads:
    enabled: true
    
    # This restricts who can use the /supportthreads command. if its not set, anyone with MANAGE_THREADS permission can use the command.
    permission: "${ ROLES.COMMUNITY_MANAGER }"
    
    configs:
      main:
        # The interaction to display when the command is run.
        displayInteractionPath: "support"
        
        # The interaction to display when someone interacts with the supportThreadButton
        supportThreadConfirmationInteractionPath: "supportDisclaimer"
        
        # The interaction to send in the opened thread
        supportThreadDisplayInteractionPath: "supportThreadPrompt"
        
        # The channel to open the thread in
        supportThreadChannel: "${  CHANNELS.SUPPORT  }"
        
        # Configure the button to open a support thread, if this is not set then a button with the label "HELP" is used
        supportThreadButton:
          title: "Open a Thread"
          type: "SECONDARY"
          
        # Interaction to display when the user clicks the troubleshootButton
        troubleshootInteractionPath: "self-help"
        
        # An optional button that displays an interaction upon clicking. if this is not set, no button is displayed
        troubleshootButton:
          title: "Help"
          type: "PRIMARY"



